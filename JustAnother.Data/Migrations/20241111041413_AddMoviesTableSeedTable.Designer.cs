// <auto-generated />
using System;
using JustAnother.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JustAnother.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241111041413_AddMoviesTableSeedTable")]
    partial class AddMoviesTableSeedTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JustAnother.Model.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Great action movies",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Great epic movies",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Great sci-fi movies",
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("JustAnother.Model.Entity.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateOnly>("InitialRelease")
                        .HasColumnType("date");

                    b.Property<bool>("IsOscarWinner")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.",
                            InitialRelease = new DateOnly(2020, 1, 1),
                            IsOscarWinner = true,
                            Name = "Action Movie 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.",
                            InitialRelease = new DateOnly(1986, 5, 5),
                            IsOscarWinner = false,
                            Name = "Adventure Movie 1"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.",
                            InitialRelease = new DateOnly(1960, 5, 5),
                            IsOscarWinner = false,
                            Name = "SciFi Movie 1"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.",
                            InitialRelease = new DateOnly(1986, 9, 5),
                            IsOscarWinner = true,
                            Name = "Adventure Movie 2"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.",
                            InitialRelease = new DateOnly(2003, 5, 5),
                            IsOscarWinner = false,
                            Name = "Action Movie 2"
                        });
                });

            modelBuilder.Entity("JustAnother.Model.Entity.Movie", b =>
                {
                    b.HasOne("JustAnother.Model.Entity.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JustAnother.Model.Entity.Category", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
